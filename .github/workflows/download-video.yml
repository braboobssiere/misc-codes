name: Download Video

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: "Video URL to download"
        required: true
        
jobs:
  download_and_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip ffmpeg
          pip3 install --upgrade yt-dlp

      - name: Create output directory
        run: mkdir -p output

      - name: Write YouTube cookie file if needed
        run: |
          # If the video URL is from YouTube, write the secret yt_cookies to cookies.txt.
          if [[ "${{ github.event.inputs.video_url }}" == *"youtube.com"* || "${{ github.event.inputs.video_url }}" == *"youtu.be"* ]]; then
            echo "Detected YouTube URL. Writing cookies file..."
            echo "${{ secrets.yt_cookies }}" > cookies.txt
          else
            echo "Non-YouTube URL detected. Not writing cookies file."
          fi

      - name: Download video with yt-dlp into output folder
        run: |
          URL="${{ github.event.inputs.video_url }}"
          if [[ "$URL" == *"youtube.com"* || "$URL" == *"youtu.be"* ]]; then
            echo "Detected YouTube URL, using cookies file."
            yt-dlp --cookies cookies.txt -f "bestvideo[height<=1080]+bestaudio/best" -o "output/%(title)s.%(ext)s" "$URL"
          else
            echo "Non-YouTube URL detected, proceeding without cookies."
            yt-dlp -f "bestvideo[height<=1080]+bestaudio/best" -o "output/%(title)s.%(ext)s" "$URL"
          fi
          echo "Download complete. Listing files in output directory:"
          ls -lh output

      - name: Check and Remux video with ffmpeg if needed
        run: |
          for file in output/*; do
            # Check if the file has both video and audio streams
            video_streams=$(ffprobe -v error -select_streams v -show_entries stream=codec_type -of csv=p=0 "$file" | grep -c video)
            audio_streams=$(ffprobe -v error -select_streams a -show_entries stream=codec_type -of csv=p=0 "$file" | grep -c audio)

            if [[ "$video_streams" -gt 0 && "$audio_streams" -gt 0 ]]; then
              echo "$file already has both video and audio streams. Skipping remux."
            else
              output_file="${file%.*}.mp4"
              echo "Remuxing $file to $output_file"
              ffmpeg -i "$file" -c copy "$output_file"
              # Remove the original separate video/audio files
              rm "$file"
              echo "Removed original file: $file"
            fi
          done
          echo "Check and remuxing complete. Listing files in output directory:"
          ls -lh output

      - name: Upload output directory as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-video
          path: output
