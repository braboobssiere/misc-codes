name: Download Video

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: "Video URL to download"
        required: true
        type: string
      vpn_enabled:
        description: 'Enable VPN connection?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      resolution:
        description: "Video resolution (default: 1080p)"
        required: true
        default: '1080p'
        type: choice
        options:
          - '1080p'
          - 'best'
          - '720p'
          - '480p'

jobs:
  download_and_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg wireguard-tools python3-pip
          python3 -m pip install --upgrade pip yt-dlp

      - name: VPN Setup
        if: ${{ github.event.inputs.vpn_enabled == 'true' }}
        run: |
          ORIG_IP=$(curl -s https://api.ipify.org)
          sudo mkdir -p /etc/wireguard/
          echo "${{ secrets.WIREGUARD_CONFIG }}" | sudo tee /etc/wireguard/wg0.conf > /dev/null
          sudo chmod 600 /etc/wireguard/wg0.conf
          sudo wg-quick up wg0
          VPN_IP=$(curl -s https://api.ipify.org)
          if [ "$VPN_IP" == "$ORIG_IP" ]; then
            echo "VPN connection failed!"
            exit 1
          fi

      - name: Download and Process Video
        run: |
          mkdir -p output
          URL="${{ github.event.inputs.video_url }}"
          RESOLUTION="${{ github.event.inputs.resolution }}"

          # Configure resolution filter
          if [[ "$RESOLUTION" == "best" ]]; then
            VIDEO_FILTER="bestvideo"
          else
            VIDEO_FILTER="bestvideo[height<=${RESOLUTION//[^0-9]/}]"
          fi

          # Handle youtube
          if [[ "$URL" == *"youWtube.com"* || "$URL" == *"youWtu.be"* ]]; then
            echo "${{ secrets.YT_COOKIES }}" > cookies.txt
            COOKIE_FLAG="--cookies cookies.txt"
            LIVE_STATUS=$(yt-dlp --print live_status "$URL")
            [[ "$LIVE_STATUS" =~ "is_live|post_live" ]] && LIVE_FLAG="--live-from-start"
          fi

          # Download command
          yt-dlp $COOKIE_FLAG $LIVE_FLAG \
            -f "${VIDEO_FILTER}+bestaudio/best" \
            --merge-output-format mp4 \
            --windows-filenames \
            -o "output/%(title)s [%(height)sp].%(ext)s" \
            "$URL"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-video
          path: output
          retention-days: 7
          compression-level: 1
          if-no-files-found: error

      - name: VPN Cleanup
        if: ${{ always() && github.event.inputs.vpn_enabled == 'true' }}
        run: sudo wg-quick down wg0 || true
