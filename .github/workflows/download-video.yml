name: Download Video

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: "Video URL to download"
        required: true
        type: string
      vpn_location:
        description: 'Select VPN location or disable'
        required: true
        default: 'TradeWar'
        type: choice
        options:
          - TradeWar
          - GrandCentral
          - Disable
      resolution:
        description: "Video resolution (default: 1080p)"
        required: true
        type: choice
        default: '1080p'
        options:
          - '1080p'
          - 'best'
          - '720p'
          - '480p'
      cookies:
        description: "Pass cookies to yt-dlp?"
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      additional_args:
        description: "Optional yt-dlp arguments"
        required: false
        default: ''
      upload_to_cloud:
        description: "Upload downloaded video to cloud storage?"
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'

jobs:
  download_and_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          PACKAGES="ffmpeg python3-pip"

          # Add VPN dependencies if enabled
          if [ "${{ github.event.inputs.vpn_enabled }}" = "true" ]; then
            PACKAGES="$PACKAGES wireguard-tools"
          fi

          # Add Cloud dependencies if upload is enabled
          if [ "${{ github.event.inputs.upload_to_cloud }}" = "true" ]; then
            PACKAGES="$PACKAGES jq curl"
          fi

          sudo apt-get install -y $PACKAGES
          python3 -m pip install --upgrade pip --pre yt-dlp[default,curl-cffi]

      - name: VPN Setup
        if: ${{ github.event.inputs.vpn_location != 'Disable' }}
        env:
          GrandCentral_CONFIG: ${{ secrets.WIREGUARD_GRANDCENTRAL }}
          TradeWar_CONFIG: ${{ secrets.WIREGUARD_TRADEWAR }}
        run: |
          sudo mkdir -p /etc/wireguard/
          
          case "${{ github.event.inputs.vpn_location }}" in
            GrandCentral) CONFIG_VAR="GrandCentral_CONFIG" ;;
            TradeWar) CONFIG_VAR="TradeWar_CONFIG" ;;
            *)
              echo "::error::Invalid location selection"
              exit 1
              ;;
          esac

          if [ -z "${!CONFIG_VAR}" ]; then
            echo "::error::No configuration found for ${{ github.event.inputs.vpn_location }}"
            exit 1
          fi

          echo "${!CONFIG_VAR}" | base64 -d | sudo tee /etc/wireguard/wg0.conf 
          sudo chmod 600 /etc/wireguard/wg0.conf 

          for i in {1..5}; do
              sudo wg-quick up wg0
              sleep 1 
              if sudo wg show wg0 >/dev/null 2>&1; then
                  echo "VPN connected successfully on attempt $i"
                  break
              else
                  echo "VPN connection failed (attempt $i/5)"
                  sudo wg-quick down wg0 >/dev/null 2>&1
                  [ $i -lt 5 ] && sleep 1
              fi
          done

          if ! sudo wg show wg0 >/dev/null 2>&1; then
              echo "::error::VPN failed to connect after 5 attempts"
              exit 1
          fi

      - name: Download and Process Video
        continue-on-error: true
        run: |
          mkdir -p output
          URL="${{ github.event.inputs.video_url }}"
          RESOLUTION="${{ github.event.inputs.resolution }}"

          # Configure format filter based on resolution
          if [[ "$RESOLUTION" == "best" ]]; then
            FORMAT_OPTION=""
          else
            FORMAT_OPTION="-S \"+res:${RESOLUTION//[^0-9]/},+vcodec:av01\""
          fi

          # Handle YouTube downloads using cookies if provided
          if [[ "$URL" == *"youtube.com"* || "$URL" == *"youtu.be"* ]]; then
            if [[ "${{ github.event.inputs.cookies }}" == 'true' ]]; then
              echo "${{ secrets.YT_COOKIES }}" >> yt_cookies.txt
              COOKIE_FLAG="--cookies yt_cookies.txt"
            fi

            LIVE_STATUS=$(yt-dlp ${COOKIE_FLAG} --print live_status "$URL")
            echo "Live status: '$LIVE_STATUS'"
            if [[ "$LIVE_STATUS" =~ ^(is_live|post_live)$ ]]; then
              LIVE_FLAG="--live-from-start"
            fi
          fi

          # Handle Twitter downloads using cookies if provided
          if [[ "$URL" == *"twitter.com"* || "$URL" == *"x.com"* ]] && \
             [[ "${{ github.event.inputs.cookies }}" == 'true' ]]; then
            echo "${{ secrets.TWITTER_COOKIES }}" >> twitter_cookies.txt
            COOKIE_FLAG="--cookies twitter_cookies.txt"
          fi

          ADDITIONAL_ARGS="${{ github.event.inputs.additional_args }}"

          # Build the download command
          COMMAND="yt-dlp -i --no-progress ${COOKIE_FLAG} ${LIVE_FLAG} \
          ${ADDITIONAL_ARGS} ${FORMAT_OPTION} --windows-filenames \
          -o \"output/%(title).170B [%(id)s] (%(resolution)s).%(ext)s\" \
          --embed-subs --sub-langs all,-live_chat --embed-metadata ${URL}"

          # Log and execute the command
          echo "Download command: ${COMMAND}"
          eval "${COMMAND}" 2> output/logs.txt
          [ ! -s output/logs.txt ] && rm -f output/logs.txt

      - name: VPN Cleanup
        if: ${{ always() && github.event.inputs.vpn_enabled == 'true' }}
        run: |
          sudo wg-quick down wg0 || true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-video
          path: output
          compression-level: 1
          if-no-files-found: error

      - name: Upload Files to Gofile
        if: ${{ github.event.inputs.upload_to_cloud == 'true' }}
        run: |
          UPLOAD_URL="https://upload.gofile.io/uploadfile"
          UPLOAD_LINKS=""
          guest_token=""
          folder_id=""

          upload_file() {
            local file=$1
            shift
            local extra_args=("$@")

            RESPONSE=$(curl -s -X POST -F "file=@\"$file\"" "${extra_args[@]}" "$UPLOAD_URL")
            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            if [ "$STATUS" != "ok" ]; then
              ERROR=$(echo "$RESPONSE" | jq -r '.data // .status')
              echo "::error::Upload failed for $file: $ERROR"
              exit 1
            fi
            echo "$RESPONSE"
          }

          for file in output/*; do
            echo "Uploading $(basename "$file")..."
            extra_args=()
            if [ -n "$guest_token" ] && [ "$guest_token" != "null" ] && 
               [ -n "$folder_id" ] && [ "$folder_id" != "null" ]; then
              echo "::add-mask::$guest_token"
              echo "::add-mask::$folder_id"
              extra_args=(-H "Authorization: Bearer $guest_token" -F "folderId=$folder_id")
            fi

            RESPONSE=$(upload_file "$file" "${extra_args[@]}")

            if [ -z "$guest_token" ]; then
              guest_token=$(echo "$RESPONSE" | jq -r '.data.guestToken')
              echo "::add-mask::$guest_token"
            fi
            if [ -z "$folder_id" ]; then
              folder_id=$(echo "$RESPONSE" | jq -r '.data.parentFolder')
              echo "::add-mask::$folder_id"
            fi

            LINK=$(echo "$RESPONSE" | jq -r '.data.downloadPage')
            UPLOAD_LINKS+="- [$(basename "$file")]($LINK)\n"
          done

          FILE_COUNT=$(echo -e "$UPLOAD_LINKS" | grep -c '^-')
          SUMMARY="### 📁 Upload Results\n**Files uploaded:** $FILE_COUNT"

          # Append the upload summary to GitHub Step Summary
          echo -e "$SUMMARY\n\n$UPLOAD_LINKS" >> $GITHUB_STEP_SUMMARY
          echo "links=$(echo -e "$UPLOAD_LINKS" | base64 -w 0)" >> $GITHUB_OUTPUT
