name: Magnet Downloader
on:
  workflow_dispatch:
    inputs:
      source:
        description: "Input link"
        required: true
        type: string

jobs:
  process-downloader:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=16'

      - name: Install Dependency 
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wireguard-tools
          sudo npm install webtorrent-cli -g

      - name: VPN Setup 
        env: 
          PRIMARY_CONFIG: ${{ secrets.WIREGUARD_GRANDCENTRAL }}
          SECONDARY_CONFIG: ${{ secrets.WIREGUARD_TRADEWAR }}
          
        run: |
          sudo mkdir -p /etc/wireguard/
          WG_CONF="/etc/wireguard/wg0.conf"
          handle_vpn_attempt() {
            local config_content="$1"
            local label="$2"
            
            echo "$config_content" | sudo tee $WG_CONF > /dev/null
            sudo chmod 600 $WG_CONF

            for i in {1..3}; do
              if timeout 60 sudo wg-quick up wg0; then
                return 0
              fi
              echo "${label^} VPN attempt $i/3 failed"
              sleep 3
            done
            return 1
          }
          if ! handle_vpn_attempt "$PRIMARY_CONFIG" "primary"; then
            echo "::warning::Primary failed - Trying secondary"
            if ! handle_vpn_attempt "$SECONDARY_CONFIG" "secondary"; then
              echo "::error::All VPN configurations failed after 3 attempts each"
              exit 11
            fi
          fi
          if ! sudo wg show wg0 >/dev/null 2>&1; then
            echo "::error::VPN connection verification failed"
            exit 12
          fi
        
      - name: Download files
        run: |
          mkdir -p magnet_output
          download_output=$(webtorrent download "${{ inputs.source }}" --out magnet_output)
          files_name=$(echo "$download_output" | grep -oP '(?<=Downloading: ).*' | head -n 1)
          sanitized_file_name=$(echo "$files_name" | tr -cd '[:alnum:]_.-[:space:]' | sed 's/^[_.-]*//;s/[_.-]*$//')
          echo "files_name=${sanitized_file_name}" >> $GITHUB_ENV

      - name: VPN Cleanup
        if: ${{ always() }}
        run: sudo wg-quick down wg0 || true
        
      - name: Zip files 
        run: |
          cd magnet_output
          file_count=$(find . -type f | wc -l)
    
          if [ "$file_count" -eq 1 ]; then
              file_size=$(stat -c%s "$(find . -type f -print -quit)")
              if [ "$file_size" -le 2147483648 ]; then  
              # 2GB in bytes
                  echo "Single file under 2GB, keeping as-is"
                  exit 0
              fi
          fi

          echo "Creating uncompressed split archive"
          zip -0 -r -e -s 2048m -m "${{ env.files_name }}.zip" . <<< "${{ secrets.MAGNET_PASSWORD }}"
        shell: bash

      - name: Upload downloaded files
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-files
          path: magnet_output/
          compression-level: 0
          if-no-files-found: error

      - name: Upload Files to Gofile
        run: |
          UPLOAD_URL="https://upload.gofile.io/uploadfile"
          guest_token=""
          folder_id=""
          UPLOAD_LINKS=""
          FIRST_FILE=true

          while IFS= read -r -d '' file; do
            echo "▫️ Starting upload: $(basename "$file")"
            extra_args=()
            if [ "$FIRST_FILE" = false ]; then
              extra_args+=(-H "Authorization: Bearer $guest_token" -F "folderId=$folder_id")
            fi
            
            RESPONSE=$(curl -s -X POST -F "file=@\"$file\"" "${extra_args[@]}" "$UPLOAD_URL")

            PYTHON_OUTPUT=$(python3 <<EOF
          import json, sys
          try:
              data = json.loads('''$RESPONSE''')
              if "$FIRST_FILE" == "true":
                  guest_token = data['data']['guestToken']
                  folder_id = data['data']['parentFolder']
                  print(f"{guest_token}\t{folder_id}")
              else:
                  print("-\t-")          
              status = 'ok' if data['status'] == 'ok' else 'error'
              result_data = data.get('data', {}).get('downloadPage', '') if status == 'ok' else data.get('data', '')
              print(f"{status}\t{result_data}")
          except Exception as e:
              print(f"error\tJSON parsing failed: {str(e)}")
              sys.exit(1)
          EOF
            )

            {
              read -r token_part folder_part
              read -r status_type result_data
            } <<< "$PYTHON_OUTPUT"

            if [ "$FIRST_FILE" = true ]; then
              guest_token="$token_part"
              folder_id="$folder_part"
              FIRST_FILE=false
              echo "GUEST_TOKEN=$guest_token" >> $GITHUB_ENV
              echo "FOLDER_ID=$folder_id" >> $GITHUB_ENV
              echo "Created folder ID"
            fi

            if [ "$status_type" != "ok" ]; then
              echo "::error file=$file::Upload failed: $result_data"
            else
              LINK="$result_data"
              UPLOAD_LINKS+="- $(basename "$file")\n"
              echo "Success: $LINK"
            fi
          done < <(find magnet_output/ -type f -print0)

          echo "### File Uploads: $LINK" >> $GITHUB_STEP_SUMMARY
          echo -e "\n$UPLOAD_LINKS" >> $GITHUB_STEP_SUMMARY

          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"File Uploads: $LINK \n$UPLOAD_LINKS\"}" \
            "${{ secrets.DISCORD_WEBHOOK }}"
