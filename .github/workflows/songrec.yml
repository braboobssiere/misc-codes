name: Song Recognition

on: 
  workflow_dispatch

permissions:
  contents: write

jobs:
  recognize:
    runs-on: ubuntu-latest
    outputs:
      results: ${{ steps.songrec.outputs.responses }}
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        # System setup
        sudo apt-get update
        sudo apt-get install -y software-properties-common ffmpeg jq
        
        # Secure SongRec installation
        wget -qO- 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x6888550b2fc77d09' | sudo tee /etc/apt/trusted.gpg.d/songrec.asc
        sudo add-apt-repository ppa:marin-m/songrec -y
        sudo apt-get install -y songrec

    - name: Process audio files
      id: songrec
      run: |
        cd input/songrec
        :> entries.json  # Initialize output storage
        
        for file in *; do
            # Skip metadata files
            [[ "$file" == entries.json || "$file" == output.json ]] && continue
            
            # File type verification
            mime_type=$(file --mime-type -b "$file")
            has_audio=false
            
            # Audio content detection
            if [[ $mime_type == audio/* ]]; then
                has_audio=true
            elif [[ $mime_type == video/* ]]; then
                ffmpeg -nostdin -i "$file" -hide_banner 2>&1 | grep -qi 'audio' && has_audio=true
            else
                echo "::notice:: Skipping non-media file: $file (MIME: $mime_type)"
                continue
            fi
            
            [[ $has_audio != true ]] && continue

            # Song recognition attempt
            response=$(songrec audio-file-to-recognized-song "$file" 2>&1 || echo '{"error":"no_match"}')
            
            # JSON validation
            if ! jq -e . >/dev/null 2>&1 <<< "$response"; then
                response='{"error":"invalid_response"}'
            fi
            
            # URL extraction
            url=$(jq -r '
                if .error? then
                    "❌ Error: " + (.error | tostring)
                elif .track?.url? then
                    .track.url
                else
                    "❌ No match found"
                end' <<< "$response" 2>/dev/null || echo "🛑 Processing error")

            # Conditional file deletion
            if [[ "$url" == http* ]]; then
                rm "$file"
                echo "🗑️ Deleted successfully matched file: $file"
            else
                echo "🔍 Keeping file with result: $url"
            fi

            # Results documentation
            echo "### \`$file\`" >> $GITHUB_STEP_SUMMARY
            echo "**Track URL**: ${url}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Structured output
            jq -n \
                --arg fn "$file" \
                --arg url "$url" \
                '{file: $fn, url: $url}' >> entries.json
        done

        # Output finalization
        if [ -s entries.json ]; then
            jq -s '{responses: .}' entries.json > output.json
            echo "results=$(jq -c . output.json)" >> $GITHUB_OUTPUT
        else
            echo "⚠️ No processable files found" >> $GITHUB_STEP_SUMMARY
            echo "results=[]" >> $GITHUB_OUTPUT
        fi
        rm -f entries.json output.json

    - name: Commit processed file removals
      run: |
        git config --local user.name "github-actions"
        git config --local user.email "github-actions@github.com"
        git add -A
        git commit -m "Clear Input" || echo "No changes to commit"
        git push
