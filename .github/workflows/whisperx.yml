name: WhisperX Transcription

on:
  workflow_dispatch:
    inputs:
      language:
        description: 'Language code (optional e.g. en, ja)'
        required: false
        default: ''
      media_url:  # New input parameter
        description: 'URL to media file (optional, replaced local file)'
        required: false
        default: ''

jobs:
  transcribe:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - run: |
        echo "whisperx" >> requirements.txt

    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: '3.12'

    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ffmpeg wget
        version: 1.0

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg wget
        pip install -r requirements.txt
        mkdir -p output/ downloaded_input/

    - name: Fetch remote media
      if: ${{ inputs.media_url != '' }}
      run: |
        wget -q -P downloaded_input/ "${{ inputs.media_url }}"
        echo "Downloaded input file: $(ls downloaded_input/)"

    - name: Run WhisperX
      run: |
        # Priority: Use downloaded file if available, else local file
        if [ -n "$(ls -A downloaded_input/ 2>/dev/null)" ]; then
          INPUT_FILE=$(find downloaded_input/ -type f | head -n 1)
        else
          INPUT_FILE=$(find input/whisperx/ -type f ! -name '*.txt' | head -n 1)
        fi

        if [ -z "$INPUT_FILE" ]; then
          echo "‚ùå No valid input files found"
          exit 1
        fi

        COMMAND="whisperx --compute_type int8 --model large-v2 "
        LANGUAGE="${{ inputs.language }}"
        [ -n "$LANGUAGE" ] && COMMAND+="--language $LANGUAGE "
        COMMAND+="--output_dir output \"$INPUT_FILE\""
        
        echo "Running: $COMMAND"
        eval $COMMAND

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: transcription-results
        path: output/
        
